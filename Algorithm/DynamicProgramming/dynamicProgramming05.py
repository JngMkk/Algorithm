"""
    문제

        n x m 크기의 금광이 있음. 금강은 1 x 1 크기의 칸으로 나누어져 있으며, 각 칸은 특정한 크기의 금이 들어 있음.

        채굴자는 첫 번째 열부터 출발하여 금을 캐기 시작함. 맨 처음에는 첫 번째 열의 어느 행에서든 출발할 수 있음.
        이후에 m - 1번에 걸쳐서 매번 오른쪽 위, 오른쪽, 오른쪽 아래 3가지 중 하나의 위치로 이동해야 함.
        결과적으로 채굴자가 얻을 수 있는 금의 최대 크기를 출력하는 프로그램을 작성.

        예)
            1 3 3 2
            2 1 4 1
            0 6 4 7
                        => 얻을 수 있는 금의 최대 크기: 19

        첫째 줄에 테스트 케이스 T가 입력됨 (1 <= T <= 1000)

        매 테스트 케이스 첫째 줄에 n과 m이 공백으로 구분되어 입력됨. (1 <= n, m <= 20)
        둘 째줄에 n x m개의 위치에 매장된 금의 개수가 공백으로 구분되어 입력됨( 1 <= 각 위치에 매장된 금의 개수 <= 100)

        테스트 케이스마다 채굴자가 얻을 수 있는 금의 최대 크기를 출력함. 각 테스트 케이스는 줄 바꿈을 이용해 구분함.

2
3 4
1 3 3 2 2 1 4 1 0 6 4 7
4 4
1 3 1 5 2 2 4 1 5 0 2 3 0 6 1 2

=>
    19
    16
"""

# 나의 풀이
res = []
for _ in range(int(input())):
    n, m = map(int, input().split())
    gold = list(map(int, input().split()))
    d = []
    for i in range(n):
        d.append(gold[i * m : i * m + 4])

    for j in range(1, m):
        for i in range(n):
            if i == 0:
                d[i][j] = d[i][j] + max(d[i][j - 1], d[i + 1][j - 1])
            elif i > 0 and i < n - 1:
                d[i][j] = d[i][j] + max(d[i][j - 1], d[i + 1][j - 1], d[i - 1][j - 1])
            else:
                d[i][j] = d[i][j] + max(d[i][j - 1], d[i - 1][j - 1])

    max_ = 0
    for i in range(n):
        max_ = max(max_, d[i][m - 1])

    res.append(max_)

for r in res:
    print(r)


"""
    문제 해결 아이디어

        금광의 모든 위치에 대하여 다음의 세 가지만 고려하면 됨.
            1. 왼쪽 위에서 오는 경우
            2. 왼쪽 아래에서 오는 경우
            3. 왼쪽에서 오는 경우

        세 가지 경우 중에서 가장 많은 금을 가지고 있는 경우를 테이블에 갱신해주어 문제를 해결

        array[i][j] = i행 j열에 존재하는 금의 양
        d[i][j] = i행 j열까지의 최적의 해 (얻을 수 있는 금의 최댓값)

        점화식
            - d[i][j] = array[i][j] + max(d[i-1][j-1], d[i][j-1], d[i+1][j-1])

        이때 테이블에 접근할 때마다 리스트의 범위를 벗어나지 않는지 체크해야 함.
        편의상 초기 데이터를 담는 변수 array를 사용하지 않아도 됨.
            - 바로 dp 테이블에 초기 데이터를 담아서 다이내믹 프로그래밍을 적용할 수 있음.
"""
