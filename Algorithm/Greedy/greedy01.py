"""
    그리디 알고리즘은 현재 상황에서 지금 당장 가장 좋은 것만 고르는 방법.

    일반적인 그리디 알고리즘은 문제를 풀기 위한 최소한의 아이디어를 떠올릴 수 있는 능력을 요구

    정당성 분석이 중요함.
        - 단순히 가장 좋아 보이는 것을 반복적으로 선택해도 최적의 해를 구할 수 있는지 검토해야 함.

    일반적인 상황에서 그리디 알고리즘은 최적의 해를 보장할 수 없을 때가 많음.
"""

"""
    문제

        카운터에는 거스름돈으로 사용할 500원, 100원, 50원, 10원짜리 동전이 무한히 존재한다고 가정.
        손님에게 거슬러 주어야 할 돈이 N원일 때 거슬러 주어야 할 동전의 최소 개수는?
        단, 거슬러 줘야 할 돈 N은 항상 10의 배수임.
"""

# 나의 풀이(해답과 같았음)
N = int(input())
coin = [500, 100, 50, 10]
cnt = 0

for c in coin:
    cnt += N // c
    N %= c

print(cnt)

"""
    해답

        문제 해결 아이디어
            - 최적의 해를 빠르게 구하기 위해서는 가장 큰 화폐 단위부터 돈을 거슬러 주면 됨.
            - N원을 거슬러 줘야할 때, 가장 먼저 500원으로 거슬러 줄 수 있을 만큼 거슬러 줌.
            - 이후에 100원, 50원, 10원짜리 동전들 차례대로 거슬러 줄 수 있을 만큼 거슬러 주면 됨.

        정당성 분석
            - 가장 큰 화폐 단위부터 돈을 거슬러 주는 것이 최적의 해를 보장하는 이유는?
                - 가지고 있는 동전 중에서 큰 단위가 항상 작은 단위의 배수이므로 작은 단위의 동전들을 종합해 다른 해가 나올 수 없기 때문임.
            - 만약에 800원을 거슬러 주어야 하는데 화폐 단위가 500원, 400원, 100원이라면,
              큰 단위부터 거슬러 주게 되면 (500원, 100원, 100원, 100원) 총 4개를 거슬러 줘야 하지만,
              (400원, 400원) 총 2개를 거슬러 주는 것이 최적의 해가 됨.
            - 그리디 알고리즘 문제에서는 문제 풀이를 위한 최소한의 아이디어를 떠올리고 이것이 정당한지 검토할 수 있어야 함.
"""

"""
    시간 복잡도 분석
        - 화폐의 종류가 K라고 할 때, 소스코드의 시간 복잡도는 O(K)임.
        - 이 알고리즘의 시간 복잡도는 거슬러줘야 하는 금액과는 무관하며, 동전의 총 종류에만 영향을 받음.
"""
