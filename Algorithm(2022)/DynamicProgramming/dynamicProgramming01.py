"""
    다이나믹 프로그래밍은 메모리를 적절히 사용하여 수행 시간 효율성을 비약적으로 향상시키는 방법.

    이미 계산된 결과(작은 문제)는 별도의 메모리 영역에 저장하여 다시 계산하지 않도록 함.

    다이나믹 프로그래밍의 구현은 일반적으로 두 가지 방식(탑다운과 바텀업)으로 구성됨

    '동적 계획법'
        - 일반적인 프로그래밍 분야에서 동적이란 어떤 의미?
            - 자료구조에서 동적 할당은 프로그램이 실행되는 도중에 실행에 필요한 메모리를 할당하는 기법
            - 반면에 다이나믹 프로그래밍에서 다이나믹은 별다른 의미 없이 사용된 단어

    다이나믹 프로그래밍은 문제가 다음 조건을 만족할 때 사용할 수 있음.
        1. 최적 부분 구조 (Optimal Substructure)
            - 큰 문제를 작은 문제로 나눌 수 있으며 작은 문제의 답을 모아서 큰 문제를 해결할 수 있음
        2. 중복되는 부분 문제 (Overlapping Subproblem)
            - 동일한 작은 문제를 반복적으로 해결해야 함.

    예) 피보나치 수열

        1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89 ...

        - 점화식이란 인접한 항들 사이의 관계식을 의미.
        - 피보나치 수열을 점화식으로 표현하면
            a_n = a_n-1 + a_n-2, a1 = 1, a2 = 1

        단순 재귀 함수로 피보나치 수열을 해결하면 지수 시간 복잡도를 가지게 됨 (같은 수가 여러번 호출되기 때문) : O(2^N)
        f(30)을 계산하기 위해 약 10억가량의 연산을 수행해야 함....
"""


# 피보나치 수열
def fibo(x):
    if x == 1 or x == 2:
        return 1
    return fibo(x - 1) + fibo(x - 2)


print(fibo(4))


"""
    메모이제이션(탑다운)

        다이나믹 프로그래밍을 구현하는 방법 중 하나.

        한 번 계산한 결과를 메모리 공간에 메모하는 기법
            - 같은 문제를 다시 호출하면 메모했던 결과를 그대로 가져옴.
            - 값을 기록해 놓는다는 점에서 캐싱이라고도 함. ( 별도의 테이블 )

    탑다운 vs 바텀업

        탑다운(메모이제이션) 방식은 하향식이라고도 하며 바텀업 방식은 상향식이라고도 함.

        다이나믹 프로그래밍의 전형적인 형태는 바텀업 방식임.
            - 결과 저장용 리스트는 DP 테이블이라고 부름

        엄밀히 말하면 메모이제이션은 이전에 계산된 결과를 일시적으로 기록해 놓는 넓은 개념을 의미함.
            - 따라서 메모이제이션은 다이나믹 프로그래밍에 국한된 개념은 아님.
            - 한 번 계산된 결과를 담아 놓기만 하고 다이나믹 프로그래밍을 위해 활용하지 않을 수도 있음.
"""

# 탑다운 다이나믹 프로그래밍 (피보나치)

# 한 번 계산된 결과를 메모이제이션하기 위한 리스트 초기화
d = [0] * 100


def fibo2(x):
    if x == 1 or x == 2:
        return 1
    if d[x] != 0:
        return d[x]

    # 아직 계산하지 않은 문제라면 점화식에 따라서 피보나치 결과 반환
    d[x] = fibo(x - 1) + fibo(x - 2)
    return d[x]


print(fibo2(99))


# 바텀업 다이나믹 프로그래밍
d = [0] * 100
d[1] = 1
d[2] = 1
n = 99
for i in range(3, n + 1):
    d[i] = d[i - 1] + d[i - 2]

print(d[n])

"""
    메모이제이션을 이용하는 경우 피보나치 수열 함수의 시간 복잡도는 O(N)
"""

"""
    다이나믹 프로그래밍 VS 분할 정복 (퀵 정렬)

        다이나믹 프로그래밍과 분할 정복은 모두 최적 부분 구조를 가질 때 사용할 수 있음.
            - 큰 문제를 작은 문제로 나눌 수 있으며 작은 문제의 답을 모아서 큰 문제를 해결할 수 있는 상황

        다이나믹 프로그래밍과 분할 정복의 차이점은 부분 문제의 중복.
            - 다이나믹 프로그래밍 문제에서는 각 부분 문제들이 서로 영향을 미치며 부분 문제가 중복됨.
            - 분할 정복 문제에서는 동일한 부분 문제가 반복적으로 계산되지 않음.
"""
