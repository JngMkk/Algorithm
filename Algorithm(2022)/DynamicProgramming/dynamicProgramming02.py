"""
    문제

        개미 전사는 부족한 식량을 충당하고자 메뚜기 마을의 식량창고를 몰래 공격하려고 함.
        메뚜기 마을에는 여러 개의 식량창고가 있는데 식량창고는 일직선으로 이어져 있음.

        각 식량창고에는 정해진 수의 식량을 저장하고 있으며 개미 전사는 식량창고를 선택적으로 약탈하여 식량을 빼앗을 예정.
        이때 메뚜기 정찰병들은 일직선상에 존재하는 식량창고 중에서 서로 인접한 식량창고가 공격받으면 바로 알아챌 수 있음.

        따라서 개미 전사가 정찰병에게 들키지 않고 식량창고를 약탈하기 위해서는 최소한 한 칸 이상 떨어진 식량창고를 약탈해야 함.

        예를 들어 식량창고 4개가 1, 3, 1, 5라고 하면

        이때 개미 전사는 두 번째 식량창고와 네 번째 식량창고를 선택했을 때 최댓값인 총 8개의 식량을 빼앗을 수 있음.
        개미 전사는 식량창고가 이렇게 일직선상일 때 최대한 많은 식량을 얻기를 원함.

        개미 전사를 위해 식량창고 N개에 대한 정보가 주어졌을 때 얻을 수 있는 식량의 최댓값을 구하는 프로그램 작성.

        3 <= N <= 100
        0 <= K <= 1,000
"""

"""
    문제 해결 아이디어

        예시를 확인 해보면, N = 4일 때 식량을 선택할 수 있는 경우의 수는 8가지임.
        그중 최적의 해는 8임.

        a_i를 i번째 식량창고까지의 최적의 해라고 정의한다면 다이나믹 프로그래밍을 적용할 수 있음.

        a_0 = 1, a_1 = 3, a_2 = 3, a_3 = 8

        왼쪽부터 차례대로 식량창고를 턴다고 했을 때, 특정한 i번째 식량창고에 대해서 털지 안 털지의 여부를 결정하면,
        i-1 번째 최적의 해와 i-2 번째 최적의 해와 i번째 식량의 수를 더한 것 중 큰 값이 최적의 해가 될 것임.

        점화식 : a_i = max(a_i-1, a_i-2 + k_i)

        한 칸 이상 떨어진 식량창고는 항상 털 수 있으므로 (i-3)번째 이하는 고려할 필요가 없음. (이미 앞쪽에서 고려가 된 값)

"""


# 바텀업 다이나믹 프로그래밍 진행
n = int(input())
arr = list(map(int, input().split()))

d = [0] * n
d[0] = arr[0]
d[1] = max(arr[0], arr[1])

for i in range(2, n):
    d[i] = max(d[i - 1], d[i - 2] + arr[i])

print(d[n - 1])
