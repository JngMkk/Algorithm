"""
    재귀 함수

        재귀 함수란 자기 자신을 다시 호출하는 함수를 의미함.
        재귀 함수를 문제 풀이에서 사용할 때는 재귀 함수의 종료 조건을 반드시 명시해야 함.
        종료 조건을 제대로 명시하지 않으면 함수가 무한히 호출될 수 있음.
"""


# 팩토리얼 구현 예제
def factorial_iterative(n):
    result = 1
    for i in range(1, n + 1):
        result *= i
    return result


def factorial_recursive(n):
    if n <= 1:
        return 1
    return n * factorial_recursive(n - 1)


print(factorial_iterative(100))
print(factorial_recursive(100))

"""
    최대 공약수 계산(유클리드 호제법) 예제

        두 개의 자연수에 대한 최대공약수를 구하는 대표적인 알고리즘

        유클리드 호제법
            - 두 자연수 A, B에 대하여 (A > B) A를 B로 나눈 나머지를 R이라고 하면,
              이때 A와 B의 최대공약수는 B와 R의 최대공약수와 같음

        유클리드 호제법의 아이디어를 그대로 재귀 함수로 작성할 수 있음.
"""


def gcd(a, b):
    if a % b == 0:
        return b
    else:
        return gcd(b, a % b)


print(gcd(192, 162))

"""
    재귀 함수 사용의 유의 사항

        재귀 함수를 잘 활용하면 복잡한 알고리즘을 간결하게 작성할 수 있음.
            - 단, 오히려 다른 사람이 이해하기 어려운 형태의 코드가 될 수 있으므로 신중하게 사용해야 함.

        모든 재귀 함수는 반복문을 이용하여 동일한 기능을 구현할 수 있음.

        재귀 함수가 반복문보다 유리한 경우도 있고 불리한 경우도 있음.

        컴퓨터가 함수를 연속적으로 호출하면 컴퓨터 메모리 내부의 스택 프레임에 쌓이게 됨.
            - 그래서 스택을 사용해야 할 때 구현상 스택 라이브러리 대신에 재귀 함수를 이용하는 경우가 많음.(DFS)
"""
